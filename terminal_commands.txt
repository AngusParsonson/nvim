# TMUX
------------------------------------------------------
tmux set -g prefix C-a (Sets prefix to Ctrl-a)
tmux ls
tmux list-panes -a
tmux list-window

tmux move-pane -s 3:0

tmux new -s <session_name> (create named session)
Ctrl-b d (detach from session)
tmux attach-session -t id/name
tmux kill-session -t id/name

Ctrl-b c (create new window)
Ctrl-b n (go to next window)
Ctrl-b p (go to previous window)

Ctrl-b " (split horizontally)
Ctrl-b % (split vertically)
Ctrl-b arrowKey (move between screens)
Ctrl-b : (enter tmux command prompt)
Ctrl-b { (switch current pane with left pane, use } for right)
exit (exits tmux, including exiting out of a pane)

# Tmux copy mode

? (search above)
/ (search below)

# Tmux command prompt

resize-pane -L/U/R/D <number> (resize current pane by a certain number of units)
hold Ctrl-b <arrowKey> (resize current pane)
------------------------------------------------------

# LINUX
------------------------------------------------------
cd ~ (go to home dir)
dpkg -L <packagename> (to find where package is installed)
pwd (print working directory)
grep -w <word> * (search all files in directory for word)
grep -wr <word> * (recursively search all directories and subdirectories)
chown user <filename> (change ownership of file)
mv <oldfile.txt> <newfile.txt> (rename file) 
du -s -h <filename> (show the disk usage of a certain folder)
chmod -R 777 <filename> (give all users permissions to make directories under that directory)
dd if=/dev/zero of=/dev/sdX bs=1M #replace X with the target drive letter. (wipe a disk by filling it with zeros)
history (shows all previous commands used)
dmesg (prints our message buffer of kernel, good for debugging)
rsync <srcDir> <dstDir> (syncs/copies files between directories)
	rsync -avr <src> <dst>
top (show running kernel processes, CPU concumption, general PC info etc.)
df -h <mountPoint> (disk free shows disk usage and free space)
ps aux | grep <command> (check if a command process is still running)
cat /proc/mounts (show all mounts)
<command> > file.txt (writes result of command to a file)
<command> >> file.txt (appends result of command to a file)
Ctrl-a (jump to start of line)
sudo chmod -R 777 <directory> (give all permissions to all users for a directory)
sudo ln -s /usr/bin/nodejs /usr/bin/node (create a symlink)

# File permissions

ls -l <filename> shows permissions of a file 
rwx-rwx-rwx 1 owner:group 
-> Read/write/execute permissions for owner/group/all_users
-> Number of hardlinks to the file 
-> The owner and the group

chmod XXX <file/directory> (-R can be included to recursively change permissions of all files and subdirectories in directory)
-> r = 4, w = 2, x = 1
-> e.g. chmod 777 <filename> (give all users rwx permissions)

Special permissions:
s - setuid/setgid permissions, runs an executable as the owner with the owner's permissions
chmod g+s <filename> (give setuid flag to a file)
-> e.g. "-rwsr-xr-x 1 root:users" means every user will execute this file as root
------------------------------------------------------

# NEOVIM
------------------------------------------------------
# Basic

nvim <filename> (open file with neovim)
:q (quits file)
:q! (force quit)
:wq (save and quit)
:w (save file)
:w <filename> (save with filename)

:source % 
:PlugInstall (installs new plugin)

:map (see all current key mappings)

Ctrl-w v (split screen vertically)
Ctrl-w h (split screen horizontally)
Ctrl-w <arrowKey> (switch panes)
Ctrl-w o (close all panes except for the one you're in)

V (select line)
v (select characters)
viw (select word the curser is on)
vi<char> (select everything inside chars e.g. vi( or vi")
va<char> (selects inside chars and the chars themselves)
* (select all words that cursor is on)
y (yank the selection)
p (paste on line below)
P (paste on line above)
d (cut selections)
<num>dd (delete next specified number of lines)
dw (delete up to next word in line)
dd (delete a line)
d$ (delete from cursor up until end of line)
r<char> (replace character under cursor with char)
u (undo)
Ctrl-R (redo)

w (move forward a word)
b (move backward a word)
e (move forward to end of word)
ge (move backward to end of word)

f<char> (jump to next occurence of char in a line)
F<char> (jump to previous occurence of char in a line)
t<char> (jump to just before next occurence of char in a line)
T<char> (jump to just before previous occurence of char in a line)
;   (repeat above, in same direction)
,   (repeat above, in reverse direction)

gg (go to top of file)
gd (jump to definition)
gr (jump to references)
:<lineNumber> (jump to line)
<lineNumber>k (jump up to line using relative number)
<lineNumber>j (jump down to line using relative number)
Ctrl-D (move half-page down)
Ctrl-U (move half-page up)
Ctrl-B (page up)
Ctrl-F (page down)
Ctrl-O (jump to previous location)
Ctrl-I (jump to next location)
Ctrl-Y (move view pane up)
Ctrl-E (move view pane down)
{ (jump up to next empty line)
} (jump down to next empty line)
'. (jump to last modified line)
G (go to EOF)
0 (go to start of line)
_ (go to first non-white space)
$ (go to EOL)

i (go to insert mode from command mode on current character)
I (insert at first non-white space)
a (go into insert mode after current character)
A (go to end of line and enter insert mode)
o (insert on new line below)
O (insert on new line above)

,c<space> (to comment selected block or line)
,cs (to sexy comment selected block or line)
,cu (to uncomment selected block or line)

>> (indent line or block)
<< (unindent line or block)
/<keyword> (search for keyword in file, press enter and then n to go to next occurence)
:noh (unhighlight all highlighted text)
:set paste (takes you to paste mode)
	p (paste)
	shift ins (paste from clipboard into terminal)
	:set nopaste (leave paste mode)
:%s/<find>/<replace>/gc (find and replace all instances of a word)

# Navigation

:tab new (open up a new tab)
:E (explore files in directory to open in vim)
gt (go to right tab)
gT (go to left tab)
Ctrl-^ (jump back to the last file you were in)

# Insert 

Ctrl-n or <tab> (go to next item in autocomplete menu)
Ctrl-p (go to previous item in autocomplete menu)

# Macros

q<character> (start recording macro to be assigned to chosen character)
-> Type any sequence of actions
q (stop recording)
@<character> (perform macro assigned to character)
<num>@<character> (perform macro assigned to character num times)

# Coc

:CocConfig
:CocInstall <coc-extenstion> (install coc extension)
{coc-json, coc-prettier, coc-python, coc-snippets, coc-tsserver, coc-pairs}
